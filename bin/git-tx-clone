#!/bin/sh
#
# Copyright (c) 2010 Google Inc johnjbarton@google.com

set -e 

SUBDIRECTORY_OK='yes'
. $(dirname $0)/git-sh-setup.sh
require_clean_work_tree "tx-clone"

OPTIONS_SPEC="\
git tx-clone [-x] [-name <projectName> ] [-t <branchname>] <other_path> 

Copy and track another local repository subdirectory into this directory in this repository.
--
n,name=              override default name for transplant branch
t,branch=            override 'master' default branch of other
x,explain            echo information then exit"

die() {
	echo >&2 "$@"
	exit 1
}

usage() {
	exec "$0" -h
}

eval "$(echo "$OPTIONS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"

get_repo_base() {
	(
		cd "`/bin/pwd`" &&
		cd "$1" || cd "$1.git" &&
		{
			cd .git
			pwd
		}
	) 2>/dev/null
}


PROJECT_NAME=
OTHER_BRANCH=
OTHER_PATH=

while [ "$#" -ne 0 ]; do
	case "$1" in 
	-n|--name)
	    shift
		PROJECT_NAME=$1
		;;
	-t|--branch)
		shift
		OTHER_BRANCH=$1
		;;
    -x|--explain)
        EXPLAIN=yes
        ;;
 	--)                   # some kind of marker added by rev-parse
		shift
 	    if [ "$#" -ne 1 ]; then
 	      die "other_path required"
 	    fi
		OTHER_PATH=$1
		break
		;;
	*)
		usage
		;;
	esac
	shift
done

case "$OTHER_PATH" in 
	*/)
		;;
	*?)
	    OTHER_PATH="$OTHER_PATH"/
	    ;;
	 *)
   		die "Path to other git repository required"
		;;
esac

# Strip refs/head/<branch> to give <branch>
#
LOCAL_BRANCH=`git symbolic-ref HEAD | sed -e 's/^.*\///'`

LOCAL_PATH=`pwd`
LOCAL_PREFIX=$( git rev-parse --show-prefix )

# default to 'master'
if [ -z "$OTHER_BRANCH" ]; then
  OTHER_BRANCH="master"
fi

LOCAL_GIT_DIR=$(git rev-parse --show-toplevel)

# go into the other tree and find its .git
cd $OTHER_PATH

if [ "z$(git rev-parse --is-inside-work-tree)" != "ztrue" ]; then
 cd "$LOCAL_PATH"
 die "Other path not a git repo" 
fi

if [ $(git rev-parse --show-toplevel) = "$LOCAL_GIT_DIR" ]; then
 cd "$LOCAL_PATH"
 die "Do not try to transplant from within one repo"
fi

OTHER_PREFIX=$( git rev-parse --show-prefix )
OTHER_CDUP=$( git rev-parse --show-cdup )
OTHER_GIT_URL=$( git config --get remote.origin.url ) || ( cd "$LOCAL_PATH"; die "Other git repo at $OTHER_PATH has no origin" )

# The git archive is relative to current directory, cd up so our relative path is appended to project name
cd "$OTHER_CDUP"

PROJECT_NAME=$( basename "$OTHER_GIT_URL" .git )
if [ -z "$PROJECT_NAME" ]; then
  die "No project name"
fi

TX_BRANCH="tx.""$PROJECT_NAME"
DESTINATION="$LOCAL_PATH"/"$PROJECT_NAME"/"$OTHER_PREFIX"

if [ -e "$DESTINATION" ]; then
  die "Destination \"$DESTINATION\" already exists"
fi

if [ "$EXPLAIN" =  yes ]; then
  echo "git transplant branch named $TX_BRANCH"
  echo "git transplant from branch $OTHER_BRANCH"
  echo "git transplant from directory $OTHER_PATH"
  echo "git transplant to   directory $DESTINATION"
  echo "git transplant current local branch $LOCAL_BRANCH"
  exit 0
fi

OTHER_COMMIT="$( git rev-parse $OTHER_BRANCH )"

# copy the other subtree into our local tree
#
git archive --format=tar --prefix="$PROJECT_NAME"/ "$OTHER_BRANCH" "$OTHER_PREFIX" | ( cd "$LOCAL_PATH" && tar xfp -)

cd "$LOCAL_PATH"

# commit our edits
#
git add -A

git commit -a -m "Transplant $OTHER_PATH from $OTHER_GIT_URL @ $OTHER_BRANCH to $PROJECT_NAME/$OTHER_PREFIX \\n (git tx-clone --name $PROJECT_NAME --branch $OTHER_BRANCH $OTHER_PATH)"

# record meta data for this transplant
#
META_TX_DIR="$LOCAL_GIT_DIR"/.git-tx/"$PROJECT_NAME"
mkdir -p $META_TX_DIR
echo $( git rev-parse HEAD ) > "$META_TX_DIR"/local_commit 
echo "$OTHER_COMMIT"         > "$META_TX_DIR"/other_commit
echo "$LOCAL_PREFIX"         > "$META_TX_DIR"/local_prefix 
echo "$OTHER_PREFIX"         > "$META_TX_DIR"/other_prefix 
echo "$OTHER_GIT_URL"        > "$META_TX_DIR"/other_git_url 

# record the Other absolute path to the cloned dir, install dependent TODO
#
echo "$OTHER_PATH"          > "$META_TX_DIR"/other_path 
 
git --no-pager log $( cat "$META_TX_DIR"/local_commit )..HEAD
 
exit 0
