#!/bin/sh
#
# Copyright (c) 2010 Google Inc johnjbarton@google.com
# Google BSD license http://code.google.com/google_bsd_license.html


set -e 

OPTIONS_SPEC="\
git tx-clone [-x] [-f] [-name <projectName> ] [-t <branchname>] <other_path> 

Copy and track another local repository subdirectory into this directory in this repository.
--
n,name=              override default name for transplant branch
p,prefix=             override default <project-name>/<other_prefix> for local path prefix
t,branch=            override 'master' default branch of other
f,force              clone even if there are local changes
x,explain            echo information then exit"

die() {
  echo >&2 "$@"
  exit 1
}

usage() {
  exec "$0" -h
}

SUBDIRECTORY_OK='yes'
. $(dirname $0)/git-sh-setup.sh



eval "$(echo "$OPTIONS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"

PROJECT_NAME=
. $(dirname $0)/git-tx-setclear

while [ "$#" -ne 0 ]; do
  case "$1" in 
  -n|--name)
      shift
    PROJECT_NAME=$1
    ;;
  -t|--branch)
    shift
    OTHER_BRANCH=$1
    ;;
    -x|--explain)
        EXPLAIN=yes
        ;;
    -f|--force)
        FORCE=yes
        ;;
    -p|--prefix)
      shift
      LOCAL_PREFIX=$1
      ;;
     --)                   # some kind of marker added by rev-parse
      shift
      if [ "$#" -ne 1 ]; then
        die "other_path required"
      fi
      OTHER_PATH=$1
      break
      ;;
    *)
      usage
      ;;
    esac
    shift
done

case "$OTHER_PATH" in 
  */)
    ;;
  *?)
      OTHER_PATH="$OTHER_PATH"/
      ;;
   *)
       die "Path to other git repository required"
    ;;
esac

if [ "$FORCE" != yes ]; then
  require_clean_work_tree "tx-clone"
fi

# Strip refs/head/<branch> to give <branch>
#
LOCAL_BRANCH=`git symbolic-ref HEAD | sed -e 's/^.*\///'`

LOCAL_PATH=`pwd`
DEFAULT_LOCAL_PREFIX=$( git rev-parse --show-prefix )

# default to 'master'
if [ -z "$OTHER_BRANCH" ]; then
  OTHER_BRANCH="master"
fi

LOCAL_GIT_DIR=$(git rev-parse --show-toplevel)

# go into the other tree and find its .git
cd $OTHER_PATH

if [ "z$(git rev-parse --is-inside-work-tree)" != "ztrue" ]; then
 cd "$LOCAL_PATH"
 die "Other path not a git repo" 
fi

if [ $(git rev-parse --show-toplevel) = "$LOCAL_GIT_DIR" ]; then
 cd "$LOCAL_PATH"
 die "Do not try to transplant from within one repo"
fi

OTHER_PREFIX=$( git rev-parse --show-prefix )
OTHER_CDUP=$( git rev-parse --show-cdup )
OTHER_GIT_URL=$( git config --get remote.origin.url ) || ( cd "$LOCAL_PATH"; die "Other git repo at $OTHER_PATH has no origin" )

# The archive is relative to current directory, cd up so our relative path is appended to project name
cd "$OTHER_CDUP"

if [ -z "$PROJECT_NAME" ]; then
  PROJECT_NAME=$( basename "$OTHER_GIT_URL" .git )
  if [ -z "$PROJECT_NAME" ]; then
    die "No project name"
  fi
fi

TX_BRANCH="tx.""$PROJECT_NAME"
if [ -z "$LOCAL_PREFIX" ]; then
  LOCAL_PREFIX="$DEFAULT_LOCAL_PREFIX""$PROJECT_NAME"/"$OTHER_PREFIX"
fi

DESTINATION="$LOCAL_GIT_DIR"/"$LOCAL_PREFIX"

if [ -e "$DESTINATION" ]; then
  die "Destination \"$DESTINATION\" already exists"
fi

if [ "$EXPLAIN" =  yes ]; then
  echo "git transplant branch named $TX_BRANCH"
  echo "git transplant from branch $OTHER_BRANCH"
  echo "git transplant from directory $OTHER_PATH"
  echo "git transplant to   directory $DESTINATION"
  echo "git transplant current local branch $LOCAL_BRANCH"
  exit 0
fi

OTHER_COMMIT="$( git rev-parse $OTHER_BRANCH )"

# copy the other subtree into our local tree
#
ORIG_OTHER_BRANCH=`git symbolic-ref HEAD | sed -e 's/^.*\///'`
git checkout "$OTHER_BRANCH"
tar -c -C  "$OTHER_PREFIX" . | ( cd "$LOCAL_GIT_DIR" && mkdir -p "$DESTINATION" && cd "$DESTINATION" && tar xfp -)

git branch --no-track  tx-"$PROJECT_NAME"
git checkout "$ORIG_OTHER_BRANCH"

cd "$DESTINATION"

# commit our edits
#
git add -A

git commit -a -m "Transplant $OTHER_PREFIX from $OTHER_GIT_URL @ $OTHER_BRANCH to $LOCAL_PREFIX"

LOCAL_COMMIT=$( git rev-parse HEAD )
git branch --no-track tx-"$PROJECT_NAME"

. $(dirname $0)/git-tx-setdown
 
git --no-pager log $( cat "$META_TX_DIR"/local_commit )..HEAD
 
exit 0
